{"version":3,"sources":["redux/reducers/user.js","redux/reducers/index.js","redux/actionTypes.js","redux/store.js","pages/Home/Splash.jsx","redux/actions.js","api/protectedAPI.js","api/index.js","components/Form/index.jsx","pages/Login/index.jsx","components/DeleteBtn/index.jsx","components/Jumbotron/index.jsx","components/Grid/index.jsx","components/CheckBoxes/index.jsx","pages/Listing.jsx","pages/AddNewListing/index.jsx","pages/NoMatch.jsx","components/Nav/index.jsx","pages/Signup/index.jsx","App.js","serviceWorker.js","index.js"],"names":["setUserDetails","accessJot","JotBrowser","getToken","firstName","getClaim","role","id","initialState","details","rootState","user","userState","combineReducers","state","action","type","payload","tokens","access","refresh","eject","refreshJot","configureStore","preloadedState","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","Splash","props","Container","Row","Col","Jumbotron","fluid","className","src","alt","Button","onClick","history","push","onLogin","onLogout","getListings","axiosP","get","getListing","deleteListing","delete","saveListing","listingData","post","adjustListing","data","put","axios","create","baseURL","getAuthHeaderAsync","valid","Promise","resolve","makeAuthHeader","token","then","res","success","reject","errors","jot","Authorization","interceptors","request","use","config","a","async","source","CancelToken","authHeader","store","dispatch","cancel","cancelToken","headers","signup","newUser","login","credentials","protectedAPI","Input","TextArea","rows","FormBtn","style","float","marginBottom","children","ServerError","axiosError","response","errorObj","statusText","status","error","Alert","variant","name","message","schema","yup","username","required","password","connect","Modal","show","onHide","animation","size","aria-labelledby","centered","Header","closeButton","Title","Body","initialValues","validationSchema","onSubmit","values","formikBag","API","setErrors","setStatus","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Form","noValidate","Group","as","controlId","Label","Control","autoComplete","placeholder","onChange","onBlur","value","isInvalid","Feedback","disabled","to","DeleteBtn","tabIndex","height","clear","paddingTop","textAlign","split","map","join","CheckBoxes","contract","listing","mls","showingTime","compliance","disclosures","faceBook","toggleChangeContract","api","_id","setState","prevState","toggleChangeMls","toggleChangeShowingTime","toggleChangeCompliance","toggleChangeDisclosures","toggleChangeFaceBook","this","checked","Component","Listings","listings","address","startDate","Date","notes","loadListings","Boolean","catch","err","console","log","handleInputChange","event","target","Card","key","width","Img","Text","format","AddNewListing","date","handleFormSubmit","preventDefault","FormGroup","selected","onSelect","handleSelect","dateFormat","Footer","NoMatch","aria-label","Navbar","Brand","href","Fragment","lastName","email","min","App","ConnectedPublicRoute","exact","path","component","Login","Signup","ConnectedPrivateRoute","Detail","rest","render","routeProps","pathname","from","location","hostname","match","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a3730ea.chunk.js","sourcesContent":["/**\n * Reducers specify how the application's state changes in response to actions sent to the store.\n * Remember that actions only describe what happened, but don't describe how the application's state changes.\n * @see {@link https://redux.js.org/basics/reducers}\n * \n */\n\nimport { Browser as JotBrowser } from 'jwt-jot'\n\nimport { LOGIN, LOGOUT } from \"../actionTypes\";\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case LOGIN: {\n            new JotBrowser('JWT_ACCESS', action.payload.tokens.access);\n            new JotBrowser('JWT_REFRESH', action.payload.tokens.refresh);\n            return {\n                ...state,\n                details: setUserDetails()\n            };\n        }\n        case LOGOUT: {\n            // remove all tokens from local storage\n            const accessJot = new JotBrowser('JWT_ACCESS');\n            if (accessJot.getToken()) accessJot.eject();\n            const refreshJot = new JotBrowser('JWT_REFRESH');\n            if (refreshJot.getToken()) refreshJot.eject();\n\n            return {\n                ...state,\n                details: setUserDetails()\n            };\n        }\n        default:\n            return {\n                ...state,\n                details: setUserDetails()\n            };\n    }\n}\n\nconst setUserDetails = () => {\n    const accessJot = new JotBrowser('JWT_ACCESS');\n    return accessJot.getToken() ?\n        {\n            firstName: accessJot.getClaim('firstName'),\n            role: accessJot.getClaim('role'),\n            id: accessJot.getClaim('sub')\n        } :\n        null;\n}\nexport const initialState = {\n    details: setUserDetails()\n};","/**\n * Reducers specify how the application's state changes in response to actions sent to the store.\n * Remember that actions only describe what happened, but don't describe how the application's state changes.\n * @see {@link https://redux.js.org/basics/reducers}\n * \n * Here we are combinging two reducers into a single root reducer,\n * and also creating a rootState, which will be the initial state passed to the store.\n */\n\n\nimport { combineReducers } from \"redux\";   // @see {@link https://redux.js.org/api/combinereducers/}\nimport user, { initialState as userState } from \"./user\";\n\n\n/**\n * Create correctly setup initial state for root reducer\n */\nexport const rootState = {\n    user: userState\n};\n\n/**\n * Merging our separate reducers into one root reducer\n */\nexport default combineReducers({\n    user\n});","/**\n * Separate file for the declaration of action types, \n * just to keep concerns clean and clear.\n */\nexport const LOGIN  = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';","import { createStore } from \"redux\";\nimport rootReducer, { rootState } from \"./reducers\";\n\n\n/**\n * \n * @see {@link https://redux.js.org/api/createstore}\n */\nfunction configureStore(preloadedState) {\n\n    const store = createStore(\n        rootReducer,\n        preloadedState,\n        // allowing our store to be enhanced by the redux devtools (with which we can do time-travel and state inspection)\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n    // Setting up hot module reloading for our reducers\n    if (process.env.NODE_ENV !== 'production' && module.hot) {\n        module.hot.accept('./reducers', () => store.replaceReducer(rootReducer))\n    }\n\n    return store\n}\n\nexport default configureStore(rootState);","import React from \"react\";\nimport { Button, Col, Row, Container, Jumbotron } from 'react-bootstrap';\n\nexport default function Splash(props) {\n    return (\n        <Container>\n            <Row>\n                <Col >\n                    <Jumbotron fluid className='mt-4'>\n                        <img src=\"ralogo.png\" alt=\"logo\" className=\"text-center\"></img>\n                        <h1 className='text-center'>Realtor Assist</h1>\n                        <p className='text-center'>Helping your Real Estate office run more efficiently</p>\n                    \n                        <Row className=\"text-center\">\n                        <Col >\n                            <Button \n                            type=\"submit\" \n                            className=\"btn btn-primary\" \n                            onClick={() => props.history.push('/signup')}\n                            >Signup</Button>\n                        </Col>\n                        <Col >\n                            <Button \n                            type=\"submit\" \n                            className=\"btn btn-primary\"\n                            onClick={() => props.history.push('/login')}\n                            >Login</Button>\n                        </Col>\n                    </Row>\n                    </Jumbotron>\n                    \n                    <Jumbotron fluid className='mt-4'>\n                        <h1 className='text-center'>Helping real estate assistants & coordinators create organizational systems for the real estate office</h1>\n                        <Row className=\"text-center\">\n                        <Col >\n                        {/* <Button \n                            type=\"submit\" \n                            className=\"btn btn-primary\" \n                            onClick={() => props.history.push('/signup')}\n                            >Learn More</Button> */}\n                            </Col>\n                            </Row>\n                    </Jumbotron>\n                </Col>\n            </Row>\n        </Container>\n        \n    );\n}","import { LOGIN, LOGOUT } from \"./actionTypes\";\n\n/**\n * \n * Actions are payloads of information that send data from your application to your store.\n * They are the only source of information for the store.\n * @see {@link https://redux.js.org/basics/actions}\n */\n\n // Fill in the properties that need to be returned\n // in each action\nexport const onLogin = (tokens) => ({\n    type: LOGIN,\n    payload: {tokens}\n});\n\nexport const onLogout = () => ({\n    type: LOGOUT\n});","import axios from \"axios\";\nimport { Browser as JotBrowser } from 'jwt-jot'\n\nimport store from '../redux/store';\nimport { onLogout } from '../redux/actions';\n\nexport default {\n    // Gets all listings\n    getListings: function () {\n        return axiosP.get(\"/listings\");\n    },\n    // Gets the listing with the given id\n    getListing: function (id) {\n        return axiosP.get(\"/listings/\" + id);\n    },\n    // Deletes the listing with the given id\n    deleteListing: function (id) {\n        return axiosP.delete(\"/listings/\" + id);\n    },\n    // Saves a listing to the database\n    saveListing: function (listingData) {\n        return axiosP.post(\"/listings\", listingData);\n    },\n    //Adjusts the listing when a checkbox is checked\n    adjustListing: function (id, data) {\n        return axiosP.put(\"/listings/\" + id, data)\n    }\n};\n\nconst axiosP = axios.create({\n    baseURL: '/api/protected'\n});\n\n// https://www.npmjs.com/package/axios#interceptors\naxiosP.interceptors.request.use(\n    async function (config) {\n        const source = axios.CancelToken.source();\n        let authHeader;\n        try {\n            authHeader = await getAuthHeaderAsync();\n        } catch (error) {\n            store.dispatch(onLogout());\n            source.cancel(`Request canceled: ${error}`);\n            return { cancelToken: source.token };\n        }\n\n        config.headers = {\n            ...config.headers,\n            ...authHeader\n        }\n\n        return config;\n    }\n);\n\nfunction getAuthHeaderAsync() {\n    const accessJot = new JotBrowser('JWT_ACCESS');\n\n    if (accessJot.getToken() && accessJot.valid()) return Promise.resolve(makeAuthHeader(accessJot));\n\n    const refreshJot = new JotBrowser('JWT_REFRESH');\n\n    if (!refreshJot.getToken()) return Promise.reject('Refresh token not found on client.');\n    if (!refreshJot.valid()) return Promise.reject('Refresh token not valid on client.');\n\n    return axios.post(\"/api/auth/refresh\", { token: refreshJot.getToken() })\n        .then(res => res.data)\n        .then(data => {\n            if (data.success) {\n                // save new tokens in localstorage\n                new JotBrowser('JWT_REFRESH', data.tokens.refresh);\n                const accessJot = new JotBrowser('JWT_ACCESS', data.tokens.access);\n                return makeAuthHeader(accessJot);\n            } else {\n                return Promise.reject(data.errors.token);\n            }\n        });\n}\n\nfunction makeAuthHeader(jot) {\n    return { Authorization: 'Bearer ' + jot.getToken() };\n}","import axios from \"axios\";\nimport protectedAPI from './protectedAPI';\n\n\nexport default {\n  signup: function (newUser) {\n    return axios.post(\"/api/auth/signup\", newUser).then(res => res.data);\n  },\n\n  login: function (credentials) {\n    return axios.post(\"/api/auth/login\", credentials).then(res => res.data);\n  },\n  ...protectedAPI\n};","import React from \"react\";\nimport { Alert } from 'react-bootstrap';\n\n// This file exports the Input, TextArea, and FormBtn components\n\nexport function Input(props) {\n  return (\n    <div className=\"form-group\">\n      <input className=\"form-control\" {...props} />\n    </div>\n  );\n}\n\nexport function TextArea(props) {\n  return (\n    <div className=\"form-group\">\n      <textarea className=\"form-control\" rows=\"5\" {...props} />\n    </div>\n  );\n}\n\nexport function FormBtn(props) {\n  return (\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\n      {props.children}\n    </button>\n  );\n}\n\nexport function ServerError(props) {\n  const { axiosError } = props;\n\n  if (!axiosError || !axiosError.response) return null;\n\n  const { statusText, status } = axiosError.response;\n  let errorObj;\n\n  if (axiosError.response.data.error) {\n    // handle custom error sent back by server\n    errorObj = axiosError.response.data.error;\n  } else {\n    errorObj = axiosError;\n  }\n\n\n  return (\n    <Alert variant='danger'>\n      {status} {statusText}<br />\n      Error Name: {errorObj.name}<br />\n      Error Message: {errorObj.message}\n    </Alert>\n  );\n}","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Button, Col, Form, Modal } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport { onLogin } from '../../redux/actions'\nimport API from '../../api'\nimport { ServerError } from '../../components/Form';\n\nconst schema = yup.object({\n    username: yup.string().required(),\n    password: yup.string().required()\n});\n\nconst Login = (props) => {\n\n    return <Modal\n        show={true}\n        onHide={() => props.history.push('/')}\n        animation={false}\n        size=\"lg\"\n        aria-labelledby=\"login-form\"\n        centered\n    >\n        <Modal.Header closeButton>\n            <Modal.Title id=\"login-form\">\n                Realtor Assist Login\n        </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <h5 className=\"card-title\">Login to your dashboard</h5>\n            <Formik\n                initialValues={{ username: '', password: '' }}\n                validationSchema={schema}\n                onSubmit={async (values, formikBag) => {\n                    try {\n                        const data = await API.login(values);\n                        if (data.success) {\n                            props.onLogin(data.tokens);\n                        } else {\n                            formikBag.setErrors(data.errors);\n                        }\n                    } catch (err) {\n                        formikBag.setStatus(err);\n                    }\n                    return;\n                }}\n            >\n                {({\n                    status,\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                    /* and other goodies */\n                }) => (\n                        <Form noValidate onSubmit={handleSubmit}>\n                            <ServerError axiosError={status} />\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"username\">\n                                    <Form.Label>Username</Form.Label>\n                                    <Form.Control\n                                        required\n                                        name='username'\n                                        autoComplete='username'\n                                        placeholder=\"Username\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.username}\n                                        isInvalid={!!errors.username}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.username && touched.username && errors.username}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"Password\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control\n                                        autoComplete='current-password'\n                                        required\n                                        name='password'\n                                        type=\"password\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.password}\n                                        isInvalid={!!errors.password}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.password && touched.password && errors.password}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Submit</Button>\n                        </Form>\n                    )}\n            </Formik>\n            <Link className=\"link\" to=\"/signup\">Don't have an account? <span className=\"link-signup\">Signup</span></Link>\n        </Modal.Body>\n    </Modal>;\n\n};\n\nexport default connect(\n    // mapStateToProps\n    null,\n    // mapDispatchToProps\n    { onLogin }\n)(Login);\n\n","import React from \"react\";\nimport \"./style.css\";\n\n// The ...props means, spread all of the passed props onto this element\n// That way we don't have to define them all individually\nfunction DeleteBtn(props) {\n  return (\n    <span className=\"delete-btn\" {...props} role=\"button\" tabIndex=\"0\">\n      ✗\n    </span>\n  );\n}\n\nexport default DeleteBtn;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 300, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n      className=\"jumbotron\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n//import axios from 'axios';\nimport api from '../../api';\n\n\nclass CheckBoxes extends Component {\n\n  state = {\n    contract: this.props.listing.contract || false,\n    mls: this.props.listing.mls || false,\n    showingTime: this.props.listing.showingTime || false,\n    compliance: this.props.listing.compliance || false,\n    disclosures: this.props.listing.disclosures || false,\n    faceBook: this.props.listing.faceBook || false\n  };\n\n  toggleChangeContract = () => {\n    api.adjustListing(this.props.listing._id, { ...this.props.listing, contract: !this.state.contract })\n    this.setState(prevState => ({\n      contract: !prevState.contract,\n    }));\n  }\n\n  toggleChangeMls = () => {\n    api.adjustListing(this.props.listing._id, { ...this.props.listing, mls: !this.state.mls })\n    this.setState(prevState => ({\n      mls: !prevState.mls,\n    }));\n  }\n\n  toggleChangeShowingTime = () => {\n    api.adjustListing(this.props.listing._id, { ...this.props.listing, showingTime: !this.state.showingTime })\n    this.setState(prevState => ({\n      showingTime: !prevState.showingTime,\n    }));\n  }\n\n  toggleChangeCompliance = () => {\n    api.adjustListing(this.props.listing._id, { ...this.props.listing, compliance: !this.state.compliance })\n    this.setState(prevState => ({\n      compliance: !prevState.compliance,\n    }));\n  }\n\n  toggleChangeDisclosures = () => {\n    api.adjustListing(this.props.listing._id, { ...this.props.listing, disclosures: !this.state.disclosures })\n    this.setState(prevState => ({\n      disclosures: !prevState.disclosures,\n    }));\n  }\n\n  toggleChangeFaceBook = () => {\n    api.adjustListing(this.props.listing._id, { ...this.props.listing, faceBook: !this.state.faceBook })\n    this.setState(prevState => ({\n      faceBook: !prevState.faceBook,\n    }));\n  }\n\n  // onSubmit = (e) => {\n\n  //   e.preventDefault();\n  //   let arr = [];\n  //   for (var key in this.state) {\n  //     if(this.state[key] === true) {\n  //       arr.push(key);\n  //     }\n  //   }\n  //   let data = {\n  //     check: arr.toString() \n  //   };\n  //   axios.post('http://localhost:4000/checks/add', data)\n  //         .then(res => console.log(res.data));\n  // }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-check\">\n            <label className=\"form-check-label\">\n              <input type=\"checkbox\"\n                checked={this.state.contract}\n                onChange={this.toggleChangeContract}\n                className=\"form-check-input\"\n              />\n              Signed contract\n            </label>\n          </div>\n          <div className=\"form-check\">\n            <label className=\"form-check-label\">\n              <input type=\"checkbox\"\n                checked={this.state.mls}\n                onChange={this.toggleChangeMls}\n                className=\"form-check-input\"\n              />\n              Uploaded to the MLS\n            </label>\n          </div>\n          <div className=\"form-check\">\n            <label className=\"form-check-label\">\n              <input type=\"checkbox\"\n                checked={this.state.showingTime}\n                onChange={this.toggleChangeShowingTime}\n                className=\"form-check-input\"\n              />\n              Showing Time added to listing\n            </label>\n          </div>\n          <div className=\"form-check\">\n            <label className=\"form-check-label\">\n              <input type=\"checkbox\"\n                checked={this.state.compliance}\n                onChange={this.toggleChangeCompliance}\n                className=\"form-check-input\"\n              />\n              Compliance form uploaded\n            </label>\n          </div>\n          <div className=\"form-check\">\n            <label className=\"form-check-label\">\n              <input type=\"checkbox\"\n                checked={this.state.disclosures}\n                onChange={this.toggleChangeDisclosures}\n                className=\"form-check-input\"\n              />\n              Property disclosures uploaded\n            </label>\n          </div>\n          <div className=\"form-check\">\n            <label className=\"form-check-label\">\n              <input type=\"checkbox\"\n                checked={this.state.faceBook}\n                onChange={this.toggleChangeFaceBook}\n                className=\"form-check-input\"\n              />\n              Advertised on Facebook\n            </label>\n          </div>\n          <div className=\"form-group\">\n            <button className=\"btn btn-primary\">\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CheckBoxes;","import React, { Component } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../api\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { Card } from \"react-bootstrap\";\nimport Moment from 'react-moment';\nimport CheckBoxes from \"../components/CheckBoxes\";\n\nclass Listings extends Component {\n  state = {\n    listings: [],\n    address: \"\",\n    startDate: new Date(),\n    notes: \"\",\n    contract: false,\n    mls: false,\n    showingTime: false,\n    compliance: false,\n    disclosures: false,\n    faceBook: false\n  };\n\n  componentDidMount() {\n    this.loadListings();\n  }\n\n  loadListings = () => {\n    API.getListings()\n      .then(res =>\n        this.setState({\n          listings: res.data,\n          address: \"\",\n          startDate: new Date(),\n          notes: \"\",\n          contract: false,\n          mls: Boolean,\n          showingTime: Boolean,\n          compliance: Boolean,\n          disclosures: Boolean,\n          faceBook: Boolean,\n        })\n      )\n      .catch(err => console.log(err));\n  };\n\n  deleteListing = id => {\n    API.deleteListing(id)\n      .then(res => this.loadListings())\n      .catch(err => console.log(err));\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>My Property Listings</h1>\n            </Jumbotron>\n            {this.state.listings.map(listing => {\n              return (\n                <Card key={listing._id}style={{ width: '18rem' }}>\n                  <Card.Img variant=\"top\" src=\"holder.js/100px180?text=Image cap\" />\n                  <Card.Body>\n                    <DeleteBtn onClick={() => this.deleteListing(listing._id)} />\n                    <Card.Title>{listing.address}</Card.Title>\n                    <Card.Text>\n                      <Moment format=\"MM/DD/YYYY\">\n                        {listing.startDate}\n                      </Moment>\n                    </Card.Text>\n                    <Card.Text>\n                      {listing.notes}\n                    </Card.Text>\n                  </Card.Body>\n\n                  <CheckBoxes listing={listing}></CheckBoxes>\n                </Card>\n              )\n            }\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Listings;\n","import React, { Component } from 'react';\nimport API from \"../../api\";\nimport Jumbotron from \"../../components/Jumbotron\";\nimport { Col, Row, Container } from \"../../components/Grid\";\nimport { Modal } from 'react-bootstrap';\nimport { Input, TextArea, FormBtn } from \"../../components/Form\";\nimport { Form, FormGroup } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass AddNewListing extends Component {\n  state = {\n    address: \"\",\n    startDate: new Date(),\n    notes: \"\"\n  };\n\n  saveListing = () => {\n    API.saveListing()\n      .then(res =>\n        this.setState({ listings: res.data, address: \"\", startDate: new Date(), notes: \"\" })\n      )\n      .catch(err => console.log(err));\n  };\n\n\n  handleChange = date => {\n    this.setState({\n      startDate: date\n    });\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    if (this.state.address && this.state.startDate) {\n      API.saveListing({\n        address: this.state.address,\n        date: this.state.startDate,\n        notes: this.state.notes\n      })\n        .then(res => {\n          // redirect back to listings\n          // when new listing successfully added\n          this.props.history.push('/listings');\n          //this.loadListings()\n        })\n        .catch(err => console.log(err));\n    }\n  };\n\n  render() {\n    return (\n      <Modal\n        show={true}\n        onHide={() => this.props.history.push('/listings')}\n        animation={false}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            New Listing\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Container fluid>\n            <Row>\n              <Col size=\"md-6\">\n                <Jumbotron>\n                  <h1>Add a new property listing</h1>\n                </Jumbotron>\n\n                <Form>\n                  <FormGroup>\n                    <Form.Label>Address</Form.Label>\n                    <Input\n                      value={this.state.address}\n                      onChange={this.handleInputChange}\n                      name=\"address\"\n                      placeholder=\"(required)\"\n                    />\n                    <Form.Label>Date Listed</Form.Label>\n                    <DatePicker\n                      selected={this.state.startDate}\n                      onSelect={this.handleSelect} //when day is clicked\n                      onChange={this.handleChange} //only when value has changed\n                      dateFormat=\"MM/dd/yy\"\n                      name=\"date\"\n                      placeholder=\"Date Listed (required)\"\n                    />\n                    <Form.Label>Notes</Form.Label>\n                    <TextArea\n                      value={this.state.notes}\n                      onChange={this.handleInputChange}\n                      name=\"notes\"\n                      placeholder=\"(Optional)\"\n                    />\n                  </FormGroup>\n                </Form>\n              </Col>\n            </Row>\n          </Container>\n        </Modal.Body>\n        <Modal.Footer>\n          <FormBtn\n            disabled={!(this.state.startDate && this.state.address)}\n            onClick={this.handleFormSubmit}\n          >\n            Submit Listing\n              </FormBtn>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n};\n\nexport default AddNewListing;","import React from \"react\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nfunction NoMatch() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-12\">\n          <Jumbotron>\n            <h1>404 Page Not Found</h1>\n            <h1>\n              <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n                🙄\n              </span>\n            </h1>\n          </Jumbotron>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default NoMatch;\n","import React from \"react\";\nimport { connect } from 'react-redux'\nimport { Button, Navbar } from 'react-bootstrap';\nimport { Link } from \"react-router-dom\";\n\nimport { onLogout } from '../../redux/actions'\n\nconst Nav = (props) => {\n  return <Navbar className='navbar-expand-lg navbar-dark bg-primary justify-content-between'>\n    <Navbar.Brand href=\"/\">Realtor Assist</Navbar.Brand>\n    {\n      props.user ?\n        <React.Fragment>\n          <Link to={\"/AddNewListing\"}>\n            <Button>Add New Listing</Button>\n          </Link>\n          <Button onClick={props.onLogout}>Logout</Button>\n        </React.Fragment>\n        :\n        <Link to={\"/login\"}>\n          <Button>Login</Button>\n        </Link>\n\n    }\n  </Navbar>;\n};\n\nexport default connect(\n  // mapStateToProps\n  state => ({ user: state.user.details }),\n  // mapDispatchToProps\n  { onLogout },\n)(Nav);\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Button, Col, Form, Modal } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport { onLogin } from '../../redux/actions'\nimport API from '../../api'\nimport {ServerError} from '../../components/Form';\n\n\nconst schema = yup.object({\n    firstName: yup.string().required(),\n    lastName: yup.string().required(),\n    email: yup.string().required().email(),\n    username: yup.string().required().min(3),\n    password: yup.string().required().min(8)\n});\n\n/**\n * \n * @param {*} props \n * \n * autocomplete names\n * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-autocomplete-given-name\n */\nconst Signup = (props) => {\n\n    return <Modal\n        show={true}\n        onHide={() => props.history.push('/')}\n        animation={false}\n        size=\"lg\"\n        aria-labelledby=\"signup-form\"\n        centered\n    >\n        <Modal.Header closeButton>\n            <Modal.Title id=\"signup-form\">\n                Realtor Assist Signup\n        </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <h5 className=\"card-title\">Signup to create your property listing checklists</h5>\n            <Formik\n                initialValues={{ firstName: '', lastName: '', email: '', username:'', password: '' }}\n                validationSchema={schema}\n                onSubmit={async (values, formikBag) => {\n                    try {\n                        const data = await API.signup(values);\n                        if (data.success) {\n                            props.onLogin(data.tokens);\n                        } else {\n                            formikBag.setErrors(data.errors);\n                        }\n                    } catch (err) {\n                        formikBag.setStatus(err);\n                    }\n                    return;\n                }}\n            >\n                {({\n                    status,\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                    /* and other goodies */\n                }) => (\n                        <Form noValidate onSubmit={handleSubmit}>\n                                                        <ServerError axiosError={status} />\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"signupFirstName\">\n                                    <Form.Label>First name</Form.Label>\n                                    <Form.Control\n                                        required\n                                        autoComplete='given-name'\n                                        name='firstName'\n                                        type=\"text\"\n                                        placeholder=\"First name\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.firstName}\n                                        isInvalid={!!errors.firstName}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.firstName && touched.firstName && errors.firstName}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"signupLastName\">\n                                    <Form.Label>Last name</Form.Label>\n                                    <Form.Control\n                                        required\n                                        autoComplete='family-name'\n                                        name='lastName'\n                                        type=\"text\"\n                                        placeholder=\"Last name\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.lastName}\n                                        isInvalid={!!errors.lastName}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.lastName && touched.lastName && errors.lastName}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"signupEmail\">\n                                    <Form.Label>Email address</Form.Label>\n                                    <Form.Control\n                                        required\n                                        autoComplete='email'\n                                        name='email'\n                                        type=\"email\"\n                                        placeholder=\"Email address\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.email}\n                                        isInvalid={!!errors.email}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.email && touched.email && errors.email}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"username\">\n                                    <Form.Label>Username</Form.Label>\n                                    <Form.Control\n                                        required\n                                        name='username'\n                                        autoComplete='username'\n                                        placeholder=\"Username\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.username}\n                                        isInvalid={!!errors.username}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.username && touched.username && errors.username}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"Password\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control\n                                        required\n                                        autoComplete='new-password'\n                                        name='password'\n                                        type=\"password\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.password}\n                                        isInvalid={!!errors.password}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.password && touched.password && errors.password}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Submit</Button>\n                        </Form>\n                    )}\n            </Formik>\n            <Link className=\"link\" to=\"/login\">Already have an account? <span className=\"link-signup\">Login</span></Link>\n        </Modal.Body>\n    </Modal>;\n\n};\n\nexport default connect(\n    // mapStateToProps\n    null,\n    // mapDispatchToProps\n    { onLogin }\n)(Signup);","import React from \"react\";\nimport { BrowserRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\nimport { connect } from 'react-redux'\n\nimport Splash from \"./pages/Home/Splash\";\nimport Login from './pages/Login';\nimport Listings from \"./pages/Listing\";\nimport AddNewListing from \"./pages/AddNewListing\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Nav from \"./components/Nav\";\nimport Signup from \"./pages/Signup\";\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Switch>\n          <ConnectedPublicRoute exact path=\"/\" component={Splash} />\n          <ConnectedPublicRoute path=\"/login\" component={Login} />\n          <ConnectedPublicRoute path=\"/signup\" component={Signup} />\n          <ConnectedPrivateRoute exact path=\"/listings\" component={Listings} />\n          <ConnectedPrivateRoute path=\"/AddNewListing\" component={AddNewListing} />\n          <ConnectedPrivateRoute path=\"/listings/:id\" component={Detail} />\n          <Route path=\"*\"><NoMatch /></Route>\n        </Switch>\n      </div>\n    </Router>\n\n  );\n}\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nfunction PrivateRoute({ component: Component, ...rest }) {\n\n  return (\n    <Route\n      {...rest}\n      render={routeProps =>\n        rest.user ? (\n          <Component {...routeProps} />\n        ) : (\n            <Redirect\n              to={{\n                pathname: \"/login\",\n                state: { from: routeProps.location }\n              }}\n            />\n          )\n      }\n    />\n  );\n}\n\nconst ConnectedPrivateRoute = connect(\n  // mapStateToProps\n  state => ({user: state.user.details})\n  )(PrivateRoute);\n\n// A wrapper for <Route> that redirects to the listings \n// screen if you're authenticated.\nfunction PublicRoute({ component: Component, ...rest }) {\n\n  return (\n    <Route\n      {...rest}\n      render={routeProps =>\n        !rest.user ? (\n          <Component {...routeProps} />\n        ) : (\n            <Redirect\n              to={{\n                pathname: \"/listings\"\n              }}\n            />\n          )\n      }\n    />\n  );\n}\n\nconst ConnectedPublicRoute = connect(\n  // mapStateToProps\n  state => ({user: state.user.details})\n  )(PublicRoute);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {render} from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./redux/store\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/**\n * Wrapping our entire app in the react-redux Provider component\n * \n * The <Provider /> makes the Redux store available to any nested components that have been wrapped in the connect() function.\n * Since any React component in a React Redux app can be connected,\n * most applications will render a <Provider> at the top level,\n * with the entire app’s component tree inside of it.\n * Normally, you can’t use a connected component unless it is nested inside of a <Provider>.\n * \n * @see {@link https://react-redux.js.org/api/provider}\n */\nconst renderApp = () => render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n/**\n * Setting up hot module reloading for our components\n */\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./App', renderApp)\n}\nrenderApp()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}